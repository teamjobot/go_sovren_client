// Code generated by go-swagger; DO NOT EDIT.

package matcher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new matcher API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for matcher API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MatcherJob(params *MatcherJobParams, opts ...ClientOption) (*MatcherJobOK, error)

	MatcherPost0(params *MatcherPost0Params, opts ...ClientOption) (*MatcherPost0OK, error)

	MatcherResume(params *MatcherResumeParams, opts ...ClientOption) (*MatcherResumeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MatcherJob executes a match query from a v10 job order
*/
func (a *Client) MatcherJob(params *MatcherJobParams, opts ...ClientOption) (*MatcherJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatcherJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Matcher_Job",
		Method:             "POST",
		PathPattern:        "/v10/matcher/joborder",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatcherJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatcherJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Matcher_Job: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MatcherPost0 executes a match using a document already in an index
*/
func (a *Client) MatcherPost0(params *MatcherPost0Params, opts ...ClientOption) (*MatcherPost0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatcherPost0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Matcher_Post_0",
		Method:             "POST",
		PathPattern:        "/v10/matcher/indexes/{indexId}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatcherPost0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatcherPost0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Matcher_Post_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MatcherResume executes a match query from a v10 resume
*/
func (a *Client) MatcherResume(params *MatcherResumeParams, opts ...ClientOption) (*MatcherResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatcherResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Matcher_Resume",
		Method:             "POST",
		PathPattern:        "/v10/matcher/resume",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MatcherResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatcherResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Matcher_Resume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
