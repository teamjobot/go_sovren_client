// Code generated by go-swagger; DO NOT EDIT.

package normalizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/teamjobot/go_sovren_models"
)

// NewNormalizationsPutParams creates a new NormalizationsPutParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNormalizationsPutParams() *NormalizationsPutParams {
	return &NormalizationsPutParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNormalizationsPutParamsWithTimeout creates a new NormalizationsPutParams object
// with the ability to set a timeout on a request.
func NewNormalizationsPutParamsWithTimeout(timeout time.Duration) *NormalizationsPutParams {
	return &NormalizationsPutParams{
		timeout: timeout,
	}
}

// NewNormalizationsPutParamsWithContext creates a new NormalizationsPutParams object
// with the ability to set a context for a request.
func NewNormalizationsPutParamsWithContext(ctx context.Context) *NormalizationsPutParams {
	return &NormalizationsPutParams{
		Context: ctx,
	}
}

// NewNormalizationsPutParamsWithHTTPClient creates a new NormalizationsPutParams object
// with the ability to set a custom HTTPClient for a request.
func NewNormalizationsPutParamsWithHTTPClient(client *http.Client) *NormalizationsPutParams {
	return &NormalizationsPutParams{
		HTTPClient: client,
	}
}

/* NormalizationsPutParams contains all the parameters to send to the API endpoint
   for the normalizations put operation.

   Typically these are written to a http.Request.
*/
type NormalizationsPutParams struct {

	/* SovrenAccountID.

	   Provided Account Id
	*/
	SovrenAccountID string

	/* SovrenServiceKey.

	   Provided Service Key
	*/
	SovrenServiceKey string

	/* Key.

	   They key of the item to update
	*/
	Key string

	/* Request.

	   The CreateNormalizationRequest object.
	*/
	Request *go_sovren_models.SovrenSaasDomainUpdateNormalizationRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the normalizations put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NormalizationsPutParams) WithDefaults() *NormalizationsPutParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the normalizations put params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NormalizationsPutParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the normalizations put params
func (o *NormalizationsPutParams) WithTimeout(timeout time.Duration) *NormalizationsPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the normalizations put params
func (o *NormalizationsPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the normalizations put params
func (o *NormalizationsPutParams) WithContext(ctx context.Context) *NormalizationsPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the normalizations put params
func (o *NormalizationsPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the normalizations put params
func (o *NormalizationsPutParams) WithHTTPClient(client *http.Client) *NormalizationsPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the normalizations put params
func (o *NormalizationsPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSovrenAccountID adds the sovrenAccountID to the normalizations put params
func (o *NormalizationsPutParams) WithSovrenAccountID(sovrenAccountID string) *NormalizationsPutParams {
	o.SetSovrenAccountID(sovrenAccountID)
	return o
}

// SetSovrenAccountID adds the sovrenAccountId to the normalizations put params
func (o *NormalizationsPutParams) SetSovrenAccountID(sovrenAccountID string) {
	o.SovrenAccountID = sovrenAccountID
}

// WithSovrenServiceKey adds the sovrenServiceKey to the normalizations put params
func (o *NormalizationsPutParams) WithSovrenServiceKey(sovrenServiceKey string) *NormalizationsPutParams {
	o.SetSovrenServiceKey(sovrenServiceKey)
	return o
}

// SetSovrenServiceKey adds the sovrenServiceKey to the normalizations put params
func (o *NormalizationsPutParams) SetSovrenServiceKey(sovrenServiceKey string) {
	o.SovrenServiceKey = sovrenServiceKey
}

// WithKey adds the key to the normalizations put params
func (o *NormalizationsPutParams) WithKey(key string) *NormalizationsPutParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the normalizations put params
func (o *NormalizationsPutParams) SetKey(key string) {
	o.Key = key
}

// WithRequest adds the request to the normalizations put params
func (o *NormalizationsPutParams) WithRequest(request *go_sovren_models.SovrenSaasDomainUpdateNormalizationRequest) *NormalizationsPutParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the normalizations put params
func (o *NormalizationsPutParams) SetRequest(request *go_sovren_models.SovrenSaasDomainUpdateNormalizationRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *NormalizationsPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Sovren-AccountId
	if err := r.SetHeaderParam("Sovren-AccountId", o.SovrenAccountID); err != nil {
		return err
	}

	// header param Sovren-ServiceKey
	if err := r.SetHeaderParam("Sovren-ServiceKey", o.SovrenServiceKey); err != nil {
		return err
	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
