// Code generated by go-swagger; DO NOT EDIT.

package normalizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new normalizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for normalizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NormalizationsDelete(params *NormalizationsDeleteParams, opts ...ClientOption) (*NormalizationsDeleteOK, error)

	NormalizationsGet(params *NormalizationsGetParams, opts ...ClientOption) (*NormalizationsGetOK, error)

	NormalizationsGet0(params *NormalizationsGet0Params, opts ...ClientOption) (*NormalizationsGet0OK, error)

	NormalizationsPost(params *NormalizationsPostParams, opts ...ClientOption) (*NormalizationsPostOK, error)

	NormalizationsPut(params *NormalizationsPutParams, opts ...ClientOption) (*NormalizationsPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  NormalizationsDelete deletes the normalizations for a given name
*/
func (a *Client) NormalizationsDelete(params *NormalizationsDeleteParams, opts ...ClientOption) (*NormalizationsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizationsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Normalizations_Delete",
		Method:             "DELETE",
		PathPattern:        "/v10/normalizations/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NormalizationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizationsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Normalizations_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NormalizationsGet gets a list of available normalizations
*/
func (a *Client) NormalizationsGet(params *NormalizationsGetParams, opts ...ClientOption) (*NormalizationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizationsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Normalizations_Get",
		Method:             "GET",
		PathPattern:        "/v10/normalizations",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NormalizationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Normalizations_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NormalizationsGet0 gets the normalizations for a given name
*/
func (a *Client) NormalizationsGet0(params *NormalizationsGet0Params, opts ...ClientOption) (*NormalizationsGet0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizationsGet0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Normalizations_Get_0",
		Method:             "GET",
		PathPattern:        "/v10/normalizations/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NormalizationsGet0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizationsGet0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Normalizations_Get_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NormalizationsPost creates normalizations with given values overrides if exists
*/
func (a *Client) NormalizationsPost(params *NormalizationsPostParams, opts ...ClientOption) (*NormalizationsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizationsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Normalizations_Post",
		Method:             "POST",
		PathPattern:        "/v10/normalizations",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NormalizationsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizationsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Normalizations_Post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NormalizationsPut overrides the existing normalization for the given key
*/
func (a *Client) NormalizationsPut(params *NormalizationsPutParams, opts ...ClientOption) (*NormalizationsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNormalizationsPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Normalizations_Put",
		Method:             "PUT",
		PathPattern:        "/v10/normalizations/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NormalizationsPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NormalizationsPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Normalizations_Put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
