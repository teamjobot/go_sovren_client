// Code generated by go-swagger; DO NOT EDIT.

package document

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new document API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for document API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DocumentDelete(params *DocumentDeleteParams, opts ...ClientOption) (*DocumentDeleteOK, error)

	DocumentDelete0(params *DocumentDelete0Params, opts ...ClientOption) (*DocumentDelete0OK, error)

	DocumentGetJobOrder(params *DocumentGetJobOrderParams, opts ...ClientOption) (*DocumentGetJobOrderOK, error)

	DocumentGetResume(params *DocumentGetResumeParams, opts ...ClientOption) (*DocumentGetResumeOK, error)

	DocumentHead(params *DocumentHeadParams, opts ...ClientOption) (*DocumentHeadOK, error)

	DocumentPatchJobOrder(params *DocumentPatchJobOrderParams, opts ...ClientOption) (*DocumentPatchJobOrderOK, error)

	DocumentPatchResume(params *DocumentPatchResumeParams, opts ...ClientOption) (*DocumentPatchResumeOK, error)

	DocumentPostJobOrder(params *DocumentPostJobOrderParams, opts ...ClientOption) (*DocumentPostJobOrderOK, error)

	DocumentPostResume(params *DocumentPostResumeParams, opts ...ClientOption) (*DocumentPostResumeOK, error)

	DocumentPostJobs(params *DocumentPostJobsParams, opts ...ClientOption) (*DocumentPostJobsOK, error)

	DocumentPostResumes(params *DocumentPostResumesParams, opts ...ClientOption) (*DocumentPostResumesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DocumentDelete deletes a single document from an index
*/
func (a *Client) DocumentDelete(params *DocumentDeleteParams, opts ...ClientOption) (*DocumentDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_Delete",
		Method:             "DELETE",
		PathPattern:        "/v10/index/{indexId}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentDelete0 deletes multiple documents from an index
*/
func (a *Client) DocumentDelete0(params *DocumentDelete0Params, opts ...ClientOption) (*DocumentDelete0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentDelete0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_Delete_0",
		Method:             "DELETE",
		PathPattern:        "/v10/index/{indexId}/documents",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentDelete0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentDelete0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_Delete_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentGetJobOrder retrieves a v10 job from an index
*/
func (a *Client) DocumentGetJobOrder(params *DocumentGetJobOrderParams, opts ...ClientOption) (*DocumentGetJobOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentGetJobOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_GetJobOrder",
		Method:             "GET",
		PathPattern:        "/v10/index/{indexId}/joborder/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentGetJobOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentGetJobOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_GetJobOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentGetResume retrieves a v10 resume from an index
*/
func (a *Client) DocumentGetResume(params *DocumentGetResumeParams, opts ...ClientOption) (*DocumentGetResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentGetResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_GetResume",
		Method:             "GET",
		PathPattern:        "/v10/index/{indexId}/resume/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentGetResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentGetResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_GetResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentHead checks if document exists in an index
*/
func (a *Client) DocumentHead(params *DocumentHeadParams, opts ...ClientOption) (*DocumentHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_Head",
		Method:             "HEAD",
		PathPattern:        "/v10/index/{indexId}/documents/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_Head: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPatchJobOrder updates the custom value ids for a job order
*/
func (a *Client) DocumentPatchJobOrder(params *DocumentPatchJobOrderParams, opts ...ClientOption) (*DocumentPatchJobOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPatchJobOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_PatchJobOrder",
		Method:             "PATCH",
		PathPattern:        "/v10/index/{indexId}/joborder/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPatchJobOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPatchJobOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_PatchJobOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPatchResume updates the custom value ids for a resume
*/
func (a *Client) DocumentPatchResume(params *DocumentPatchResumeParams, opts ...ClientOption) (*DocumentPatchResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPatchResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_PatchResume",
		Method:             "PATCH",
		PathPattern:        "/v10/index/{indexId}/resume/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPatchResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPatchResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_PatchResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPostJobOrder adds a single v10 job to an index
*/
func (a *Client) DocumentPostJobOrder(params *DocumentPostJobOrderParams, opts ...ClientOption) (*DocumentPostJobOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPostJobOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_PostJobOrder",
		Method:             "POST",
		PathPattern:        "/v10/index/{indexId}/joborder/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPostJobOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPostJobOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_PostJobOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPostResume adds a single v10 resume to an index
*/
func (a *Client) DocumentPostResume(params *DocumentPostResumeParams, opts ...ClientOption) (*DocumentPostResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPostResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_PostResume",
		Method:             "POST",
		PathPattern:        "/v10/index/{indexId}/resume/{documentId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPostResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPostResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_PostResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPostJobs adds multiple v10 jobs to an index
*/
func (a *Client) DocumentPostJobs(params *DocumentPostJobsParams, opts ...ClientOption) (*DocumentPostJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPostJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_Post_Jobs",
		Method:             "POST",
		PathPattern:        "/v10/index/{indexId}/joborders",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPostJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPostJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_Post_Jobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DocumentPostResumes adds multiple v10 resumes to an index
*/
func (a *Client) DocumentPostResumes(params *DocumentPostResumesParams, opts ...ClientOption) (*DocumentPostResumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDocumentPostResumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Document_Post_Resumes",
		Method:             "POST",
		PathPattern:        "/v10/index/{indexId}/resumes",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DocumentPostResumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DocumentPostResumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Document_Post_Resumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
