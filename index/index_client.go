// Code generated by go-swagger; DO NOT EDIT.

package index

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new index API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for index API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IndexDelete(params *IndexDeleteParams, opts ...ClientOption) (*IndexDeleteOK, error)

	IndexGetIndexDocumentCount(params *IndexGetIndexDocumentCountParams, opts ...ClientOption) (*IndexGetIndexDocumentCountOK, error)

	IndexGet0(params *IndexGet0Params, opts ...ClientOption) (*IndexGet0OK, error)

	IndexPost(params *IndexPostParams, opts ...ClientOption) (*IndexPostOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IndexDelete deletes an index
*/
func (a *Client) IndexDelete(params *IndexDeleteParams, opts ...ClientOption) (*IndexDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Index_Delete",
		Method:             "DELETE",
		PathPattern:        "/v10/index/{indexId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IndexDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Index_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexGetIndexDocumentCount retrieves number of documents in a single index
*/
func (a *Client) IndexGetIndexDocumentCount(params *IndexGetIndexDocumentCountParams, opts ...ClientOption) (*IndexGetIndexDocumentCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexGetIndexDocumentCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Index_GetIndexDocumentCount",
		Method:             "GET",
		PathPattern:        "/v10/index/{indexId}/count",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IndexGetIndexDocumentCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexGetIndexDocumentCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Index_GetIndexDocumentCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexGet0 retrieves all indices
*/
func (a *Client) IndexGet0(params *IndexGet0Params, opts ...ClientOption) (*IndexGet0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexGet0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Index_Get_0",
		Method:             "GET",
		PathPattern:        "/v10/index",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IndexGet0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexGet0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Index_Get_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexPost creates an index
*/
func (a *Client) IndexPost(params *IndexPostParams, opts ...ClientOption) (*IndexPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Index_Post",
		Method:             "POST",
		PathPattern:        "/v10/index/{indexId}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IndexPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Index_Post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
