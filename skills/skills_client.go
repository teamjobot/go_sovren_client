// Code generated by go-swagger; DO NOT EDIT.

package skills

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new skills API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skills API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SkillsDelete(params *SkillsDeleteParams, opts ...ClientOption) (*SkillsDeleteOK, error)

	SkillsGet(params *SkillsGetParams, opts ...ClientOption) (*SkillsGetOK, error)

	SkillsGet0(params *SkillsGet0Params, opts ...ClientOption) (*SkillsGet0OK, error)

	SkillsPost(params *SkillsPostParams, opts ...ClientOption) (*SkillsPostOK, error)

	SkillsPut(params *SkillsPutParams, opts ...ClientOption) (*SkillsPutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SkillsDelete deletes the skills for a given name
*/
func (a *Client) SkillsDelete(params *SkillsDeleteParams, opts ...ClientOption) (*SkillsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkillsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Skills_Delete",
		Method:             "DELETE",
		PathPattern:        "/v10/skills/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SkillsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkillsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Skills_Delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SkillsGet gets a list of available skills
*/
func (a *Client) SkillsGet(params *SkillsGetParams, opts ...ClientOption) (*SkillsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkillsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Skills_Get",
		Method:             "GET",
		PathPattern:        "/v10/skills",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SkillsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkillsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Skills_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SkillsGet0 gets the skills for a given name
*/
func (a *Client) SkillsGet0(params *SkillsGet0Params, opts ...ClientOption) (*SkillsGet0OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkillsGet0Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Skills_Get_0",
		Method:             "GET",
		PathPattern:        "/v10/skills/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SkillsGet0Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkillsGet0OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Skills_Get_0: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SkillsPost creates skill with given values overrides if exists
*/
func (a *Client) SkillsPost(params *SkillsPostParams, opts ...ClientOption) (*SkillsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkillsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Skills_Post",
		Method:             "POST",
		PathPattern:        "/v10/skills",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SkillsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkillsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Skills_Post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SkillsPut overrides the existing skill for the given key
*/
func (a *Client) SkillsPut(params *SkillsPutParams, opts ...ClientOption) (*SkillsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkillsPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Skills_Put",
		Method:             "PUT",
		PathPattern:        "/v10/skills/{key}",
		ProducesMediaTypes: []string{"application/json", "text/json"},
		ConsumesMediaTypes: []string{"application/json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SkillsPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkillsPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Skills_Put: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
